// internal/handler/upload_handler.go

package handler

import (
	"context"
	"fmt"
	"io"
	"log"
	_ "mime/multipart"
	"net/http"
	"path/filepath"
	"time"

	"device-service/config"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

// RegisterUploadHandler —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç POST /api/upload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.
// –û–∂–∏–¥–∞–µ—Ç—Å—è multipart/form-data —Å –ø–æ–ª–µ–º "file".
func RegisterUploadHandler(r *gin.RouterGroup) {
	r.POST("/upload", func(c *gin.Context) {
		// 1) –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ —Ñ–æ—Ä–º—ã
		fileHeader, err := c.FormFile("file")
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "file field is required"})
			return
		}

		// 2) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
		file, err := fileHeader.Open()
		if err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "cannot open uploaded file"})
			return
		}
		defer file.Close()

		// 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–∫–µ—Ç–µ: devices/{uuid}.{ext}
		ext := filepath.Ext(fileHeader.Filename) // ".jpg", ".png" –∏ —Ç.–¥.
		if ext == "" {
			ext = ".jpg"
		}
		objectName := fmt.Sprintf("devices/%s%s", uuid.New().String(), ext)

		// 4) –ü–∏—à–µ–º —Ñ–∞–π–ª –≤ Firebase Storage
		ctx, cancel := context.WithTimeout(context.Background(), 50*time.Second)
		defer cancel()

		wc := config.StorageClient.
			Bucket(config.StorageBucket).
			Object(objectName).
			NewWriter(ctx)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Content-Type
		wc.ContentType = fileHeader.Header.Get("Content-Type")
		if wc.ContentType == "" {
			wc.ContentType = "application/octet-stream"
		}

		if _, err := io.Copy(wc, file); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to write file to Firebase Storage"})
			return
		}

		// –ü–æ–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫, —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É:
		if err := wc.Close(); err != nil {
			// —Ä–∞—Å–ø–µ—á–∞—Ç–∞–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —á—Ç–æ –Ω–µ —Ç–∞–∫
			log.Printf("üî• Firebase upload close error: %v\n", err)

			// –≤–µ—Ä–Ω—ë–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º writer (—á—Ç–æ–±—ã —Ñ–∞–π–ª –±—ã–ª –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω)
		if err := wc.Close(); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to finalize file upload"})
			return
		}

		// 5) –°–æ–±–∏—Ä–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL: https://storage.googleapis.com/{bucket}/{objectName}
		publicURL := fmt.Sprintf("https://storage.googleapis.com/%s/%s", config.StorageBucket, objectName)

		// 6) –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
		c.JSON(http.StatusOK, gin.H{
			"fileName":  objectName,
			"publicUrl": publicURL,
		})
	})
}
