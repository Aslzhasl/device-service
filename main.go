// main.go

package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"device-service/config"
	"device-service/internal/handler"
	"device-service/internal/middleware"
	"device-service/internal/repository"

	"github.com/gin-gonic/gin"
	"github.com/jmoiron/sqlx"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"github.com/redis/go-redis/v9"
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ .env (–µ—Å–ª–∏ –µ—Å—Ç—å)
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è  No .env file found, relying on real env vars")
	}

	// 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
	redisUrl := os.Getenv("REDIS_URL")
	if redisUrl == "" {
		log.Fatal("REDIS_URL env var is required")
	}
	fmt.Println("REDIS_URL:", redisUrl)

	opt, err := redis.ParseURL(redisUrl)
	if err != nil {
		log.Fatalf("üôà redis.ParseURL failed: %v", err)
	}
	client := redis.NewClient(opt)

	ctx := context.Background()
	if err := client.Set(ctx, "testkey", "testvalue", 0).Err(); err != nil {
		log.Fatalf("‚ùå Redis SET failed: %v", err)
	}
	log.Println("‚úÖ Redis connected via URL")

	// 2) –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Postgres
	dbURL := os.Getenv("DATABASE_URL")
	if dbURL == "" {
		log.Fatal("DATABASE_URL env var is required")
	}
	db, err := sqlx.Connect("postgres", dbURL)
	if err != nil {
		log.Fatalf("‚ùå Failed to connect to Postgres: %v", err)
	}
	log.Println("‚úÖ Connected to Postgres")

	// 3) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase Storage (–∏ Redis –≤–Ω—É—Ç—Ä–∏ config.InitRedis, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	config.InitRedis() // –æ—Å—Ç–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã config.RedisClient –±—ã–ª –≥–æ—Ç–æ–≤

	// 4) –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	deviceRepo := repository.NewDeviceRepository(db)
	favRepo := repository.NewFavoriteRepository(db)

	// 5) –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gin
	gin.SetMode(gin.ReleaseMode)
	router := gin.Default()

	// 6) –ì—Ä—É–ø–ø–∞ /api + JWT middleware
	api := router.Group("/api")
	api.Use(middleware.JWTAuthMiddleware())

	// 7) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

	// 7.1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤: POST /api/upload (multipart/form-data)
	handler.RegisterUploadHandler(api)

	// 7.2. CRUD –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: POST/GET/PUT/DELETE /api/devices
	handler.RegisterDeviceRoutes(api, deviceRepo)

	// 7.3. –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (favorites)
	handler.RegisterFavoriteRoutes(api, favRepo)

	// 7.4. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥–æ—Ä–æ–¥–∞, —Ä–µ–≥–∏–æ–Ω—ã, —Ç—Ä–µ–Ω–¥—ã)
	handler.RegisterMetaRoutes(api, deviceRepo)

	// 8) –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	log.Printf("üöÄ Starting server on :%s\n", port)
	if err := router.Run(":" + port); err != nil {
		log.Fatalf("Server error: %v", err)
	}
}
